# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: cache-gke-cluster
  GKE_ZONE: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: app-registry
  IMAGE: app

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Verify requirements.txt exists
        run: |
          ls -la
          if [ ! -f requirements.txt ]; then
            echo "ERROR: requirements.txt not found in root directory!"
            exit 1
          fi

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/mock-credentials.json
          GOOGLE_CLOUD_PROJECT: test-project
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Create a mock credentials file
          echo '{
            "type": "service_account",
            "project_id": "test-project",
            "private_key_id": "mock-key-id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu\nNMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ\nmAbLre/ARnCwXw7gfnCNNSs=\n-----END PRIVATE KEY-----\n",
            "client_email": "mock@test-project.iam.gserviceaccount.com",
            "client_id": "000000000000000000000",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/mock%40test-project.iam.gserviceaccount.com"
          }' > mock-credentials.json
          
          # Run the tests
          cd app
          python -m pytest

  build-and-deploy-staging:
    name: Build and Deploy to Staging
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}

      - name: Deploy to Staging
        run: |
          kubectl -n staging set image deployment/app app=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging
          kubectl -n staging rollout status deployment/app

  promote-to-production:
    name: Promote to Production
    needs: build-and-deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.get-url.outputs.url }}
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Tag staging image as production
        run: |
          gcloud artifacts docker tags add \
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging \
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:production
          gcloud artifacts docker tags add \
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging \
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}

      - name: Deploy to Production
        run: |
          kubectl -n production set image deployment/app app=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:production
          kubectl -n production rollout status deployment/app

      - name: Get Service URL
        id: get-url
        run: |
          INGRESS_IP=$(kubectl -n production get ingress app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "::set-output name=url::http://${INGRESS_IP}"
