# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: cache-gke-cluster
  GKE_ZONE: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: app-registry
  IMAGE: app

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Verify requirements.txt exists
        run: |
          ls -la
          if [ ! -f requirements.txt ]; then
            echo "ERROR: requirements.txt not found in root directory!"
            exit 1
          fi

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Set up test environment
        run: |
          # Create conftest.py in app directory
          cat > app/conftest.py << 'EOF'
          import pytest
          from unittest.mock import MagicMock, patch
          import sys
          
          # Mock the entire Google Cloud modules
          sys.modules['google.auth'] = MagicMock()
          sys.modules['google.auth.default'] = MagicMock()
          sys.modules['google.cloud'] = MagicMock()
          sys.modules['google.cloud.secretmanager'] = MagicMock()
          sys.modules['google.cloud.pubsub_v1'] = MagicMock()
          
          # Mock default credentials
          mock_creds = MagicMock()
          mock_creds.default.return_value = (MagicMock(), "test-project")
          sys.modules['google.auth'] = mock_creds
          
          @pytest.fixture(autouse=True)
          def mock_env_vars(monkeypatch):
              """Mock environment variables for all tests."""
              monkeypatch.setenv("GOOGLE_CLOUD_PROJECT", "test-project")
              monkeypatch.setenv("TESTING", "true")
          EOF
          
          # Run tests
          cd app
          python -m pytest -xvs

  build-and-deploy-staging:
    name: Build and Deploy to Staging
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Auth with GCP
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Staging
        run: |
          # Ensure namespace exists
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: app
            namespace: staging
          spec:
            replicas: 4
            selector:
              matchLabels:
                app: app
            template:
              metadata:
                labels:
                  app: app
              spec:
                containers:
                - name: app
                  image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging
                  ports:
                  - containerPort: 8080
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF
          
          # Ensure service exists
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: app
            namespace: staging
          spec:
            selector:
              app: app
            ports:
            - port: 80
              targetPort: 8080
            type: ClusterIP
          EOF
          
          kubectl -n staging rollout status deployment/app

  promote-to-production:
    name: Promote to Production
    needs: build-and-deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Auth with GCP
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Tag staging image as production
        run: |
          gcloud artifacts docker tags add \
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:staging \
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:production

      - name: Deploy to Production
        run: |
          # Ensure namespace exists
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: app
            namespace: production
          spec:
            replicas: 4
            selector:
              matchLabels:
                app: app
            template:
              metadata:
                labels:
                  app: app
              spec:
                containers:
                - name: app
                  image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:production
                  ports:
                  - containerPort: 8080
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF
          
          # Ensure service exists
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: app
            namespace: production
          spec:
            selector:
              app: app
            ports:
            - port: 80
              targetPort: 8080
            type: ClusterIP
          EOF
          
          kubectl -n production rollout status deployment/app

      - name: Get Service URL
        id: get-url
        run: |
          INGRESS_IP=$(kubectl -n production get ingress app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "::set-output name=url::http://${INGRESS_IP}"
